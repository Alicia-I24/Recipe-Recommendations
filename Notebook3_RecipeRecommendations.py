#!/usr/bin/env python
# coding: utf-8
 
# # Project : Recipe Recommendations Based on Grocery Store Promotions
# 
# #### Notebook 3: 
# In Notebook 1 and Notebook 2, two CSV files were saved, "recipes_clean_v2.csv" and "grocerydeals_v3.csv", respectively. Using these CSV files, recipes are generated by randomly generating a list of 5 grocery store items.
# 
# -----------------------------------------------------------------------------------------------------------------------------------------------------------

# ### 1. Imports

# In[1]:


import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer,CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import random
import numpy as np
import pickle


# ### 2. Obtain the Two Cleaned Dataframes
# 
# - 'recipes_clean_v2.csv' : recipe database from the Food Network
# - 'grocerydeals_v3.csv' : food deals from grocery stores (Super C, Metro)

# In[31]:


df_recipes=pd.read_csv('recipes_clean_v2.csv')
df_deals=pd.read_csv('grocerydeals_v3.csv')


# In[32]:


len(df_recipes)


# In[33]:


len(df_deals)


# ### 3. Recipe Recommendation

# #### 3.1 Creating a Function to Generate a List of Random Grocery Store Items

# In[3]:


def random_groceries_5():
    # Created 5 categories of grocery types based on the aisle categories
    category1=["Beverages","Beer & Wine"]
    category2=["Frozen","Deli-Prepared","Pantry", "Snacks"]
    category3=["Meat & Poultry", "Fish & Seafood"]
    category4=["Fruits & Vegetable", "Organic Groceries"]
    category5=["Vegan & Vegetarian","Dairy & Eggs","Bread & Bakery Prodructs","World Cuisine"]

    df_cat1=df_deals[df_deals['Aisle'].isin(category1)]
    df_cat2=df_deals[df_deals['Aisle'].isin(category2)]
    df_cat3=df_deals[df_deals['Aisle'].isin(category3)]
    df_cat4=df_deals[df_deals['Aisle'].isin(category4)]
    df_cat5=df_deals[df_deals['Aisle'].isin(category5)]

    random_item_cat1=df_cat1.sample(n=1, replace=False)
    random_item_cat2=df_cat2.sample(n=1, replace=False)
    random_item_cat3=df_cat3.sample(n=1, replace=False)
    random_item_cat4=df_cat4.sample(n=1, replace=False)
    random_item_cat5=df_cat5.sample(n=1, replace=False)

    random_groceries=pd.concat([random_item_cat1, random_item_cat2, random_item_cat3, random_item_cat4, random_item_cat5], ignore_index=True)
    return random_groceries


# #### 3.2 Creating a Function to Generate a List of Recipes Based on the Grocery Store Items

# In[35]:


def recipe_recommendations():
    
    recommendations=[]
    
    ### Step 1. Set-Up TfidfVectorizer
    tf=TfidfVectorizer()

    ### Step 2. Transform the grocery store items to vectors

    # 1. All the words from "Product_Clean" from the 5 grocery items to be analysed together
    groceries=random_groceries_5()
    #print(groceries)
    
    groceries_=pd.DataFrame(groceries[['Grocery Store','Product','Aisle','Brand','Deal Price','Promotion Effectivity']])
    #print(groceries_)
    
    # 2. Vectorize the combined_groceries
    combined_groceries=groceries['Product_Clean'].str.cat(sep=" ")
    X_groceries=tf.fit_transform([combined_groceries])

    keywords=tf.get_feature_names_out() #word associated to each vector
    #print(keywords)

    ### Step 3. Transform the ingredients from recipe into vectors
    X_recipe=tf.transform(df_recipes['Ingredients_Cleaned'])

    ### Step 4. Recipe Closest in Value with Grocery Items
    scores = cosine_similarity(X_groceries, X_recipe)
    #scores.shape # 1,8080
    #print(scores.max())

    ### Step 5. Return 5 Recipes
    top_5_recipes_index=np.argsort(scores)[:, -5:][:, ::-1]

    top_5_recipes_index=top_5_recipes_index[0]
    for i in top_5_recipes_index:
        recommendations.append(df_recipes.iloc[i][['Chef','Recipe Title','Level of Difficulty','Total Time Required','Ingredients','Number of Ingredients in the Recipe','Link to Recipe']])

    pd.set_option('display.max_colwidth', None)
    df_recommendations=pd.DataFrame(recommendations)
    return groceries_,df_recommendations


# In[36]:


results=recipe_recommendations()


# In[37]:


results[0]


# In[38]:


results[1]


# ### 4. Saving Functions for Flask
# This step is required for the deployment of the project on Flask

# In[39]:


# Saving the random_groceries function to a file 
with open('grocery_items.pkl', 'wb') as file:
    pickle.dump({'function':random_groceries_5, 'dataframe': df_deals}, file)


# In[40]:


# # Verifying if it works
# with open('grocery_items.pkl', 'rb') as file:
#     saved_data=pickle.load(file)

# # Access the function and the DataFrame
# loaded_function=saved_data['function']
# loaded_dataframe=saved_data['dataframe']


# In[42]:


# loaded_function()


# In[43]:


# Saving the recipe_recommendation function to a file 
with open('recipe_recommendation.pkl', 'wb') as file:
    pickle.dump({'function':recipe_recommendations, 'dataframe': df_recipes}, file)


# In[44]:


# # Verifying if it works
# with open('recipe_recommendation.pkl', 'rb') as file:
#     saved_data=pickle.load(file)

# # Access the function and the DataFrame
# loaded_function=saved_data['function']
# loaded_dataframe=saved_data['dataframe']


# In[46]:


# loaded_function()


# In[4]:


#jupyter nbconvert --to python Notebook3_RecipeRecommendations.ipynb

